{"ast":null,"code":"var _jsxFileName = \"/Users/eungmi/Desktop/workspace/08_workspace_react/study03/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from 'react';\n\n// function App() {\n//   //모든 UI 는 상태에서 파생된다\n//   let count = 1;\n\n//   function plus(){\n//     count++;\n//     document.getElementById(\"counter\").innerHTML = count;\n//     console.log(count);\n//   }\n//   function minus (){\n//     count--;\n//     document.getElementById(\"counter\").innerHTML = count;\n//     console.log(count);\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div id=\"counter\">{count}</div>\n//       <hr></hr>\n//       <button id=\"plus\" onClick={plus}>+</button>\n//       <button id=\"minus\" onClick={minus}>-</button>\n//     </div>\n//   );\n\n// }\n\n// let count2 = 10; //함수가 다시 호출될 때 새로 선언됨 \n// function App() {\n//   // 상태변수 생성 (상태변수로 UI 가 변경되어야 함) \n//   // 한 번 선언되면 다시 선언되지 않음 -> 리렌더링에 의해서는 다시 선언되지 않음 \n//   //컴포넌트가 unmount 될 때는 초기화 됨 \n//   const [count, setCounter] = useState(1); \n//   const handlePlus = () => { //반드시 setter 를 통해서 값을 변경해야 한다 count++ 이런거 안된다 \n//     setCounter(count + 1);\n//     count2++;\n//   }\n//   const handleMinus = () => {\n//     setCounter(count - 1);\n//     count2--;\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div>{count2} , {count}</div>\n//       <hr></hr>\n//       <button onClick={handlePlus}>+</button>\n//       <button onClick={handleMinus}>-</button>\n//     </div>\n//   );\n// }\n\n// function App(){\n//   const [str, setStr] = useState('기본 메세지');\n//   const hendleChange = (e) => { //입력된 걸 e 로 꺼내옴 \n//     setStr(e.target.value);\n//   }\n\n//   return (\n//     <div>\n\n//       <h1>{str}</h1>\n\n//       <hr/>\n\n//       <div>\n//         <input type=\"text\" onChange={hendleChange}></input>\n//         <button onClick={()=>{alert(str)}}> PopUp! </button>\n//       </div>\n\n//     </div>\n//   )\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [msg, setMsg] = useState([\"Hello\", \"React\", \"State\"]); //문자열 목록 상태 저장 \n  const [msgs, setMsgs] = useState(''); //문자열 하나의 입력 상태 값 \n  const handelChange = e => {\n    set;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: msg.map((message, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handelChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Dj03PNSn2Ti9K4bwxnl/fHG47OI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","msg","setMsg","msgs","setMsgs","handelChange","e","set","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/eungmi/Desktop/workspace/08_workspace_react/study03/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from 'react';\n\n\n\n// function App() {\n//   //모든 UI 는 상태에서 파생된다\n//   let count = 1;\n\n//   function plus(){\n//     count++;\n//     document.getElementById(\"counter\").innerHTML = count;\n//     console.log(count);\n//   }\n//   function minus (){\n//     count--;\n//     document.getElementById(\"counter\").innerHTML = count;\n//     console.log(count);\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div id=\"counter\">{count}</div>\n//       <hr></hr>\n//       <button id=\"plus\" onClick={plus}>+</button>\n//       <button id=\"minus\" onClick={minus}>-</button>\n//     </div>\n//   );\n\n// }\n\n// let count2 = 10; //함수가 다시 호출될 때 새로 선언됨 \n// function App() {\n//   // 상태변수 생성 (상태변수로 UI 가 변경되어야 함) \n//   // 한 번 선언되면 다시 선언되지 않음 -> 리렌더링에 의해서는 다시 선언되지 않음 \n//   //컴포넌트가 unmount 될 때는 초기화 됨 \n//   const [count, setCounter] = useState(1); \n//   const handlePlus = () => { //반드시 setter 를 통해서 값을 변경해야 한다 count++ 이런거 안된다 \n//     setCounter(count + 1);\n//     count2++;\n//   }\n//   const handleMinus = () => {\n//     setCounter(count - 1);\n//     count2--;\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div>{count2} , {count}</div>\n//       <hr></hr>\n//       <button onClick={handlePlus}>+</button>\n//       <button onClick={handleMinus}>-</button>\n//     </div>\n//   );\n// }\n\n// function App(){\n//   const [str, setStr] = useState('기본 메세지');\n//   const hendleChange = (e) => { //입력된 걸 e 로 꺼내옴 \n//     setStr(e.target.value);\n//   }\n\n//   return (\n//     <div>\n\n//       <h1>{str}</h1>\n\n//       <hr/>\n\n//       <div>\n//         <input type=\"text\" onChange={hendleChange}></input>\n//         <button onClick={()=>{alert(str)}}> PopUp! </button>\n//       </div>\n\n//     </div>\n//   )\n// }\n\n\nfunction App (){\n  const [msg, setMsg] = useState([\"Hello\",\"React\",\"State\"]); //문자열 목록 상태 저장 \n  const [msgs, setMsgs] = useState(''); //문자열 하나의 입력 상태 값 \n  const handelChange = (e) => {\n    set\n  }\n\n\n  return (\n    <div>\n      <ul>\n        {/* <li>{msg[0]}</li>\n        <li>{msg[1]}</li>\n        <li>{msg[2]}</li> */}\n\n        {\n          msg.map((message,index)=>{\n            return (\n              <li key={index}>{message}</li>\n            );\n          })\n        }\n      </ul>\n      <hr></hr>\n      <input type=\"text\" onChange={handelChange}></input>\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;;AAIhC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,CAAC,CAAC,OAAO,EAAC,OAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAMS,YAAY,GAAIC,CAAC,IAAK;IAC1BC,GAAG;EACL,CAAC;EAGD,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAMIP,GAAG,CAACQ,GAAG,CAAC,CAACC,OAAO,EAACC,KAAK,KAAG;QACvB,oBACEb,OAAA;UAAAU,QAAA,EAAiBE;QAAO,GAAfC,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAElC,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC,eACLjB,OAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTjB,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEZ;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV;AAACf,EAAA,CA3BQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}