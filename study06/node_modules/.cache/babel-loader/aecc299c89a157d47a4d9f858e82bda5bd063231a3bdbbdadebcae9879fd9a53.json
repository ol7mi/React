{"ast":null,"code":"// import {create} from 'zustand';\nimport { create } from 'zustand';\n\n//여러개면 export 이렇게 하나하나 써줘야 한다.\nexport const useStore = create(set => ({\n  //인자값 set 은 스토어 저장소 내부의 내용을 바꾸기 위해서 존재 (스토어를 수정)\n  //실행 했을 때 객체를 리턴 \n  str: 'Hello',\n  //초기값\n  setStr: param => set({\n    str: param\n  }) //str 의 값을 변경\n  //set({str:param}) -> 스토어 객체를 수정할 건데, key 값인 str 인 대상에 param을 넣어서 내용을 바꿔라 \n}));\n// export default useStore; //하나면\n\n//배열\nexport const useArrayStore = create(set => ({\n  arr: [\"Apple\", \"Orange\", \"Mango\"],\n  add: param => set(prev => ({\n    arr: [...prev.arr, param]\n  })) //키값 arr : 과거.arr 그리고 지금\n  //prev이전 값 //주의! prev 는 스토어 객체에 대한 것. 배열을 말하는게 아님 //변경되기전 배열\n}));\nexport const useContactStore = create(set => ({\n  contact: [{\n    id: 1001,\n    name: \"eunmi\",\n    contact: \"100102041\"\n  }, {\n    id: 1001,\n    name: \"eunmi\",\n    contact: \"100102041\"\n  }],\n  addContact: param => set(prev => ({\n    contact: [...param.contact, param]\n  })),\n  delContact: id => set(prev => ({\n    contact: prev.contact.filter(item => item.id !== id) // ID로 연락처 삭제\n  }))\n}));","map":{"version":3,"names":["create","useStore","set","str","setStr","param","useArrayStore","arr","add","prev","useContactStore","contact","id","name","addContact","delContact","filter","item"],"sources":["/Users/eungmi/Desktop/workspace/08_workspace_react/study06/src/store/store.js"],"sourcesContent":["// import {create} from 'zustand';\nimport { create } from 'zustand';\n\n//여러개면 export 이렇게 하나하나 써줘야 한다.\nexport const useStore = create((set) => ({ //인자값 set 은 스토어 저장소 내부의 내용을 바꾸기 위해서 존재 (스토어를 수정)\n    //실행 했을 때 객체를 리턴 \n    str: 'Hello', //초기값\n    setStr: (param)=> set({str:param}) //str 의 값을 변경\n    //set({str:param}) -> 스토어 객체를 수정할 건데, key 값인 str 인 대상에 param을 넣어서 내용을 바꿔라 \n\n}));\n// export default useStore; //하나면\n\n\n//배열\nexport const useArrayStore = create((set)=>({\n    arr:[\"Apple\",\"Orange\",\"Mango\"],\n    add : (param)=> set(prev=> ({ arr: [...prev.arr, param] })) //키값 arr : 과거.arr 그리고 지금\n    //prev이전 값 //주의! prev 는 스토어 객체에 대한 것. 배열을 말하는게 아님 //변경되기전 배열\n}));\n\n\nexport const useContactStore = create((set)=>({\n    contact: [\n        {id:1001, name:\"eunmi\", contact:\"100102041\"},\n        {id:1001, name:\"eunmi\", contact:\"100102041\"},\n    ],\n    addContact: (param) => set(prev => ({contact: [...param.contact, param]})),\n\n    delContact: (id) => set((prev) => ({\n        contact: prev.contact.filter(item => item.id !== id) // ID로 연락처 삭제\n    }))\n}))\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,SAAS;;AAEhC;AACA,OAAO,MAAMC,QAAQ,GAAGD,MAAM,CAAEE,GAAG,KAAM;EAAE;EACvC;EACAC,GAAG,EAAE,OAAO;EAAE;EACdC,MAAM,EAAGC,KAAK,IAAIH,GAAG,CAAC;IAACC,GAAG,EAACE;EAAK,CAAC,CAAC,CAAC;EACnC;AAEJ,CAAC,CAAC,CAAC;AACH;;AAGA;AACA,OAAO,MAAMC,aAAa,GAAGN,MAAM,CAAEE,GAAG,KAAI;EACxCK,GAAG,EAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,OAAO,CAAC;EAC9BC,GAAG,EAAIH,KAAK,IAAIH,GAAG,CAACO,IAAI,KAAI;IAAEF,GAAG,EAAE,CAAC,GAAGE,IAAI,CAACF,GAAG,EAAEF,KAAK;EAAE,CAAC,CAAC,CAAC,CAAC;EAC5D;AACJ,CAAC,CAAC,CAAC;AAGH,OAAO,MAAMK,eAAe,GAAGV,MAAM,CAAEE,GAAG,KAAI;EAC1CS,OAAO,EAAE,CACL;IAACC,EAAE,EAAC,IAAI;IAAEC,IAAI,EAAC,OAAO;IAAEF,OAAO,EAAC;EAAW,CAAC,EAC5C;IAACC,EAAE,EAAC,IAAI;IAAEC,IAAI,EAAC,OAAO;IAAEF,OAAO,EAAC;EAAW,CAAC,CAC/C;EACDG,UAAU,EAAGT,KAAK,IAAKH,GAAG,CAACO,IAAI,KAAK;IAACE,OAAO,EAAE,CAAC,GAAGN,KAAK,CAACM,OAAO,EAAEN,KAAK;EAAC,CAAC,CAAC,CAAC;EAE1EU,UAAU,EAAGH,EAAE,IAAKV,GAAG,CAAEO,IAAI,KAAM;IAC/BE,OAAO,EAAEF,IAAI,CAACE,OAAO,CAACK,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC;EACzD,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}